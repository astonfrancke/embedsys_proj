/**
 ******************************************************************************
 * @file           	: display.c
 * @brief          	: display.c file.
 *                    This file contains the functions of the display.
 * @author			: Carl Aston Francke
 * @version			: 1.0
 * @date			: 28-November-2019
 ******************************************************************************
 */

#include "display.h"


/**
 * *****************************************************************************
 * @brief 	Turn on the backlight in a specific color.
 * @param 	uint8_t color, color of the light turned on.
 * 			0 = GREEN, 1 = WHITE,
 * @return 	void
 * *****************************************************************************
 */
void display_backlight(uint8_t color){

	uint32_t color_pins[] = {Disp_Green_Pin, Disp_White_Pin};

	for(int i = 0; i < NUM_OF_COLORS; i++){
		HAL_GPIO_WritePin(GPIOC, color_pins[i], GPIO_PIN_RESET);
	}

	HAL_GPIO_WritePin(GPIOC, color_pins[color], GPIO_PIN_SET);
}

void display_backlight_brightness(){

}
/**
 * *****************************************************************************
 * @brief 	Turn the lcd with specifig settings.
 * @return 	void
 * *****************************************************************************
 */
void lcd_init(){

	/* Start by resetting the display */
	HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
	HAL_Delay(100);

	display_backlight(0);

	lcd_write_ins(0x3A);	//8-Bit data length extension Bit RE=1; REV=0
	lcd_write_ins(0x09);	//4 line display
	lcd_write_ins(0x06);	//Bottom view
	lcd_write_ins(0x1E);	//Bias setting BS1=1
	lcd_write_ins(0x39);	//8-Bit data length extension Bit RE=0; IS=1
	lcd_write_ins(0x1B);	//BS0=1 -> Bias=1/6
	lcd_write_ins(0x6E); //Devider on and set value
	lcd_write_ins(0x56); //Booster on and set contrast (BB1=C5, DB0=C4)
	lcd_write_ins(0x7A); //Set contrast (DB3-DB0=C3-C0)
	lcd_write_ins(0x38); //8-Bit data length extension Bit RE=0; IS=0

	lcd_clr();

	lcd_write_ins(0x0F); //Display ON

}

/**
 * *****************************************************************************
 * @brief 	Writes a string to the lcd.
 * @param 	char * string, a char buffer containing the chars to be printed.
 * @return 	void
 * *****************************************************************************
 */
void lcd_write_string(char * string)
{
	do
	{
		lcd_write_data(*string++);
	}
	while(*string);
}


/**
 * *****************************************************************************
 * @brief 	Writes a char to the lcd.
 * @param 	char character, the character that should be printed.
 * @return 	void
 * *****************************************************************************
 */
void lcd_write_char(char character)
{
	lcd_write_data(character);
}


/**
 * *****************************************************************************
 * @brief 	Writes a instruction to the lcd.
 * @param 	uint8t ins, the instruction to the screen.
 * @return 	void
 * *****************************************************************************
 */
void lcd_write_ins(uint8_t ins){

	/* 5 synchronization bits, RS = 0, R/W = 0, lower data bits, higher data bits */
	uint8_t buffer[] = {0x1F, ins & 0x0F, (ins>>4) & 0x0F};

	HAL_GPIO_WritePin(SPI2_ChipSel_GPIO_Port, SPI2_ChipSel_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2, buffer, TRANSMIT_BUFFERSIZE, 10);
	HAL_GPIO_WritePin(SPI2_ChipSel_GPIO_Port, SPI2_ChipSel_Pin, GPIO_PIN_SET);

}

/**
 * *****************************************************************************
 * @brief 	Transmits the data to the lcd via SPI.
 * @param 	uint8t data, the data to be transmitted to the screen.
 * @return 	void
 * *****************************************************************************
 */
void lcd_write_data(uint8_t data){

	/* 5 synchronization bits, RS = 1, R/W = 0, lower data bits, higher data bits */
	uint8_t buffer[] = {0x5F, data & 0x0F, (data>>4) & 0x0F};

	HAL_GPIO_WritePin(SPI2_ChipSel_GPIO_Port, SPI2_ChipSel_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2, buffer, TRANSMIT_BUFFERSIZE, 10);
	HAL_GPIO_WritePin(SPI2_ChipSel_GPIO_Port, SPI2_ChipSel_Pin, GPIO_PIN_SET);
}

/**
 * *****************************************************************************
 * @brief 	Clears the screen by writing an 0x01 to the screen.
 * @return 	void
 * *****************************************************************************
 */
void lcd_clr(){
	lcd_write_ins(0x01);
}


/**
 * *****************************************************************************
 * @brief 	Sets the vertical line to print text on the lcd by using macros defined
 * 			in display.h
 * @param 	char pos, line to be set.
 * @return 	void
 * *****************************************************************************
 */
void lcd_set_pos(char pos)
{
	lcd_write_ins(LCD_HOME_L1+pos);
}

